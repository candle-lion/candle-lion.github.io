{"meta":{"title":"烛狮","subtitle":"万法归一","description":"多读书，多看报，少吃零食多睡觉","author":"烛狮","url":"https://www.blog.candle-lion.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-10-18T01:23:24.645Z","updated":"2020-10-18T01:23:24.645Z","comments":false,"path":"/404.html","permalink":"https://www.blog.candle-lion.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-10-18T01:23:24.649Z","updated":"2020-10-18T01:23:24.649Z","comments":false,"path":"books/index.html","permalink":"https://www.blog.candle-lion.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-18T01:23:24.648Z","updated":"2020-10-18T01:23:24.648Z","comments":false,"path":"about/index.html","permalink":"https://www.blog.candle-lion.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-10-18T01:23:24.650Z","updated":"2020-10-18T01:23:24.650Z","comments":false,"path":"categories/index.html","permalink":"https://www.blog.candle-lion.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-18T01:23:24.652Z","updated":"2020-10-18T01:23:24.652Z","comments":false,"path":"repository/index.html","permalink":"https://www.blog.candle-lion.com/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-18T01:23:24.651Z","updated":"2020-10-18T01:23:24.651Z","comments":true,"path":"links/index.html","permalink":"https://www.blog.candle-lion.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-18T01:23:24.653Z","updated":"2020-10-18T01:23:24.653Z","comments":false,"path":"tags/index.html","permalink":"https://www.blog.candle-lion.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Soul逆向分析实战","slug":"Android/apk_backward_analysis","date":"2023-08-20T02:18:19.000Z","updated":"2023-08-20T02:33:28.629Z","comments":true,"path":"2023/08/20/fbaff6bf9d76/","link":"","permalink":"https://www.blog.candle-lion.com/2023/08/20/fbaff6bf9d76/","excerpt":"","text":"参考资料连接 https://blog.csdn.net/weixin_61845324/article/details/131454938 1. 下载依赖软件 1.1 下载apktool apktool_2.8.1.jar 官方：https://github.com/iBotPeaches/Apktool/releases 2. 反编译apk 将apktool工具和需要反编译的apk放到同一目录下 执行如下命令： 12# 将soul_channel_soul64.apk 反编译输出到tmp目录下java -jar apktool_2.8.1.jar d soul_channel_soul64.apk -o tmp tmp目录下各个目录的用途： original：保存了原始的 AndroidManifest.xml 和签名信息 res：应用程序的资源文件目录，包含了应用程序的布局文件、字符串资源、图片资源等。 smali：应用程序的 Smali 代码目录，包含了应用程序的所有 Smali 代码文件（Smali 就是字节码） assets：应用程序的 assets 目录，包含了应用程序需要使用的各种资源文件，例如音频、视频、图片、配置文件等。 lib：应用程序的库目录，包含了应用程序需要使用的库文件，例如 so 文件等。 AndroidManifest.xml：应用程序的清单文件，包含应用程序的名称、包名、版本号、权限等信息。 apktool.yml：是 APKTool 工具使用的配置文件，用于指定反编译和打包 APK 文件时的各种参数和选项。 2.1 添加Debug配置 编辑AndroidManifest.xml，在Application标签里面加上android:debuggable=“true”","categories":[{"name":"Android","slug":"Android","permalink":"https://www.blog.candle-lion.com/categories/Android/"}],"tags":[{"name":"逆向分析","slug":"逆向分析","permalink":"https://www.blog.candle-lion.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"}]},{"title":"X509证书生成与读取","slug":"JAVA/Other/certificate_1","date":"2022-11-08T15:49:49.660Z","updated":"2023-08-19T21:22:28.936Z","comments":true,"path":"2022/11/08/a91342c0e4d7/","link":"","permalink":"https://www.blog.candle-lion.com/2022/11/08/a91342c0e4d7/","excerpt":"","text":"Main.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package certificate;import java.io.File;import java.io.FileInputStream;import java.io.FileReader;import java.io.FileWriter;import java.security.KeyFactory;import java.security.KeyPair;import java.security.PrivateKey;import java.security.PublicKey;import java.security.cert.CertificateFactory;import java.security.cert.X509Certificate;import java.security.spec.PKCS8EncodedKeySpec;import java.util.Collection;import org.apache.commons.io.FileUtils;import org.bouncycastle.util.io.pem.PemObject;import org.bouncycastle.util.io.pem.PemReader;import org.bouncycastle.util.io.pem.PemWriter;/** * Main * * @author 烛狮 * @date 2022-11-08 */public class Main &#123; /** * 主函数 * * @param args 参数 */ public static void main(String[] args) &#123; try &#123; String clientCertificatePath = &quot;/opt/client_cert.der&quot;; String clientPrivateKeyPath = &quot;/opt/client_private_key.der&quot;; String clientPublicKeyPath = &quot;/opt/client_public_key.der&quot;; File clientCertificateFile = FileUtils.getFile(clientCertificatePath); File clientPrivateKeyFile = FileUtils.getFile(clientPrivateKeyPath); File clientPublicKeyFile = FileUtils.getFile(clientPublicKeyPath); if (!clientCertificateFile.exists() &amp;&amp; !clientPrivateKeyFile.exists() &amp;&amp; !clientPublicKeyFile.exists()) &#123; KeyPair keyPair = SelfSignedCertificateGenerator.generateRsaKeyPair(4096); SelfSignedCertificateBuilder builder = new SelfSignedCertificateBuilder(keyPair).setCommonName(&quot;Eclipse Milo Example Client&quot;) .setOrganization(&quot;digitalpetri&quot;).setOrganizationalUnit(&quot;dev&quot;).setLocalityName(&quot;Folsom&quot;) .setStateName(&quot;CA&quot;).setCountryCode(&quot;US&quot;).setApplicationUri(&quot;urn:eclipse:milo:examples:client&quot;) .addDnsName(&quot;localhost&quot;).addIpAddress(&quot;127.0.0.1&quot;); // Get as many hostnames and IP addresses as we can listed in the certificate. builder.addIpAddress(&quot;127.0.0.1&quot;); builder.addDnsName(&quot;localhost&quot;); X509Certificate certificate = builder.build(); try (PemWriter pemWriter = new PemWriter(new FileWriter(clientCertificateFile));) &#123; pemWriter.writeObject(new PemObject(&quot;X509 CERTIFICATE&quot;, certificate.getEncoded())); pemWriter.flush(); &#125; // 获取公钥 try (PemWriter pemWriter = new PemWriter(new FileWriter(clientPublicKeyFile));) &#123; PublicKey publicKey = certificate.getPublicKey(); pemWriter.writeObject(new PemObject(&quot;RSA PUBLIC KEY&quot;, publicKey.getEncoded())); &#125; // 生成私钥 try (PemWriter pemWriter = new PemWriter(new FileWriter(clientPrivateKeyFile));) &#123; KeyPair keyPair1 = new KeyPair(certificate.getPublicKey(), keyPair.getPrivate()); pemWriter.writeObject(new PemObject(&quot;RSA PRIVATE KEY&quot;, keyPair1.getPrivate().getEncoded())); pemWriter.flush(); &#125; &#125; else &#123; // 如果已存在则直接加载 X509Certificate clientCertificate = null; try (FileInputStream in = new FileInputStream(clientCertificateFile)) &#123; CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;); Collection&lt;X509Certificate&gt; certificates = (Collection&lt;X509Certificate&gt;)certificateFactory.generateCertificates(in); for (X509Certificate certificate : certificates) &#123; clientCertificate = certificate; &#125; &#125; try (FileInputStream in = new FileInputStream(clientPrivateKeyFile)) &#123; PrivateKey privateKey = KeyFactory.getInstance(&quot;RSA&quot;).generatePrivate(new PKCS8EncodedKeySpec( new PemReader(new FileReader(clientPrivateKeyPath)).readPemObject().getContent())); new KeyPair(clientCertificate.getPublicKey(), privateKey); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; SelfSignedCertificateBuilder.java 来源：https://github.com/eclipse/milo/blob/master/opc-ua-stack/stack-core/src/main/java/org/eclipse/milo/opcua/stack/core/util/SelfSignedCertificateBuilder.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166package certificate;import java.security.KeyPair;import java.security.PublicKey;import java.security.cert.X509Certificate;import java.security.interfaces.ECPublicKey;import java.security.interfaces.RSAPublicKey;import java.time.LocalDate;import java.time.Period;import java.time.ZoneId;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * 自签名证书 * * @author 烛狮 * @date 2022-11-08 */public class SelfSignedCertificateBuilder &#123; /** * Signature Algorithm for SHA1 with RSA. * &lt;p&gt; * SHA1 was broken in 2017 and this algorithm should not be used. */ public static final String SA_SHA1_RSA = &quot;SHA1withRSA&quot;; /** * Signature Algorithm for SHA256 with RSA. */ public static final String SA_SHA256_RSA = &quot;SHA256withRSA&quot;; /** * Signature Algorithm for SHA256 with ECDSA. * &lt;p&gt; * May only be uses with EC-based KeyPairs and security profiles. */ public static final String SA_SHA256_ECDSA = &quot;SHA256withECDSA&quot;; private Period validityPeriod = Period.ofYears(3); private String commonName = &quot;&quot;; private String organization = &quot;&quot;; private String organizationalUnit = &quot;&quot;; private String localityName = &quot;&quot;; private String stateName = &quot;&quot;; private String countryCode = &quot;&quot;; private String applicationUri = &quot;&quot;; private List&lt;String&gt; dnsNames = new ArrayList&lt;&gt;(); private List&lt;String&gt; ipAddresses = new ArrayList&lt;&gt;(); private String signatureAlgorithm = SA_SHA256_RSA; private final KeyPair keyPair; private final SelfSignedCertificateGenerator generator; public SelfSignedCertificateBuilder(KeyPair keyPair) &#123; this(keyPair, new SelfSignedCertificateGenerator()); &#125; public SelfSignedCertificateBuilder(KeyPair keyPair, SelfSignedCertificateGenerator generator) &#123; this.keyPair = keyPair; this.generator = generator; PublicKey publicKey = keyPair.getPublic(); if (publicKey instanceof RSAPublicKey) &#123; signatureAlgorithm = SA_SHA256_RSA; int bitLength = ((RSAPublicKey) keyPair.getPublic()).getModulus().bitLength(); if (bitLength &lt;= 1024) &#123; Logger logger = LoggerFactory.getLogger(getClass()); logger.warn(&quot;Using legacy key size: &#123;&#125;&quot;, bitLength); &#125; &#125; else if (keyPair.getPublic() instanceof ECPublicKey) &#123; signatureAlgorithm = SA_SHA256_ECDSA; &#125; &#125; public SelfSignedCertificateBuilder setValidityPeriod(Period validityPeriod) &#123; this.validityPeriod = validityPeriod; return this; &#125; public SelfSignedCertificateBuilder setCommonName(String commonName) &#123; this.commonName = commonName; return this; &#125; public SelfSignedCertificateBuilder setOrganization(String organization) &#123; this.organization = organization; return this; &#125; public SelfSignedCertificateBuilder setOrganizationalUnit(String organizationalUnit) &#123; this.organizationalUnit = organizationalUnit; return this; &#125; public SelfSignedCertificateBuilder setLocalityName(String localityName) &#123; this.localityName = localityName; return this; &#125; public SelfSignedCertificateBuilder setStateName(String stateName) &#123; this.stateName = stateName; return this; &#125; public SelfSignedCertificateBuilder setCountryCode(String countryCode) &#123; this.countryCode = countryCode; return this; &#125; public SelfSignedCertificateBuilder setApplicationUri(String applicationUri) &#123; this.applicationUri = applicationUri; return this; &#125; public SelfSignedCertificateBuilder addDnsName(String dnsName) &#123; dnsNames.add(dnsName); return this; &#125; public SelfSignedCertificateBuilder addIpAddress(String ipAddress) &#123; ipAddresses.add(ipAddress); return this; &#125; public SelfSignedCertificateBuilder setSignatureAlgorithm(String signatureAlgorithm) &#123; this.signatureAlgorithm = signatureAlgorithm; return this; &#125; public X509Certificate build() throws Exception &#123; // Calculate start and end date based on validity period LocalDate now = LocalDate.now(); LocalDate expiration = now.plus(validityPeriod); Date notBefore = Date.from(now.atStartOfDay(ZoneId.systemDefault()).toInstant()); Date notAfter = Date.from(expiration.atStartOfDay(ZoneId.systemDefault()).toInstant()); return generator.generateSelfSigned( keyPair, notBefore, notAfter, commonName, organization, organizationalUnit, localityName, stateName, countryCode, applicationUri, dnsNames, ipAddresses, signatureAlgorithm ); &#125;&#125; SelfSignedCertificateGenerator.java 来源: https://github.com/eclipse/milo/blob/master/opc-ua-stack/stack-core/src/main/java/org/eclipse/milo/opcua/stack/core/util/SelfSignedCertificateGenerator.javapackage certificate;import java.math.BigInteger;import java.security.KeyPair;import java.security.KeyPairGenerator;import java.security.NoSuchAlgorithmException;import java.security.Provider;import java.security.SecureRandom;import java.security.cert.X509Certificate;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import org.bouncycastle.asn1.x500.X500Name;import org.bouncycastle.asn1.x500.X500NameBuilder;import org.bouncycastle.asn1.x500.style.BCStyle;import org.bouncycastle.asn1.x509.BasicConstraints;import org.bouncycastle.asn1.x509.ExtendedKeyUsage;import org.bouncycastle.asn1.x509.Extension;import org.bouncycastle.asn1.x509.GeneralName;import org.bouncycastle.asn1.x509.GeneralNames;import org.bouncycastle.asn1.x509.KeyPurposeId;import org.bouncycastle.asn1.x509.KeyUsage;import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;import org.bouncycastle.cert.CertIOException;import org.bouncycastle.cert.X509CertificateHolder;import org.bouncycastle.cert.X509v3CertificateBuilder;import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;import org.bouncycastle.jce.provider.BouncyCastleProvider;import org.bouncycastle.operator.ContentSigner;import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;public class SelfSignedCertificateGenerator &#123; /** * Generate an RSA &#123;@link KeyPair&#125; of bit length &#123;@code length&#125;. * * @param length the length, in bits, of the key to generate. * @return a &#123;@link KeyPair&#125; of bit length &#123;@code length&#125;. * @throws NoSuchAlgorithmException if no &#123;@link Provider&#125; supports RSA KeyPair generation. */ public static KeyPair generateRsaKeyPair(int length) throws NoSuchAlgorithmException &#123; KeyPairGenerator generator = KeyPairGenerator.getInstance(&quot;RSA&quot;); generator.initialize(length, new SecureRandom()); return generator.generateKeyPair(); &#125; /** * Generate an EC &#123;@link KeyPair&#125; of bit length &#123;@code length&#125;. * * @param length the length, in bits, of the key to generate. * @return a &#123;@link KeyPair&#125; of bit length &#123;@code length&#125;. * @throws NoSuchAlgorithmException if no &#123;@link Provider&#125; supports EC KeyPair generation. */ public static KeyPair generateEcKeyPair(int length) throws NoSuchAlgorithmException &#123; KeyPairGenerator generator = KeyPairGenerator.getInstance(&quot;EC&quot;); generator.initialize(length, new SecureRandom()); return generator.generateKeyPair(); &#125; public X509Certificate generateSelfSigned( KeyPair keyPair, Date notBefore, Date notAfter, String commonName, String organization, String organizationalUnit, String localityName, String stateName, String countryCode, String applicationUri, List&lt;String&gt; dnsNames, List&lt;String&gt; ipAddresses, String signatureAlgorithm) throws Exception &#123; X500NameBuilder nameBuilder = new X500NameBuilder(); if (commonName != null) &#123; nameBuilder.addRDN(BCStyle.CN, commonName); &#125; if (organization != null) &#123; nameBuilder.addRDN(BCStyle.O, organization); &#125; if (organizationalUnit != null) &#123; nameBuilder.addRDN(BCStyle.OU, organizationalUnit); &#125; if (localityName != null) &#123; nameBuilder.addRDN(BCStyle.L, localityName); &#125; if (stateName != null) &#123; nameBuilder.addRDN(BCStyle.ST, stateName); &#125; if (countryCode != null) &#123; nameBuilder.addRDN(BCStyle.C, countryCode); &#125; X500Name name = nameBuilder.build(); // Using the current timestamp as the certificate serial number BigInteger certSerialNumber = new BigInteger(Long.toString(System.currentTimeMillis())); SubjectPublicKeyInfo subjectPublicKeyInfo = SubjectPublicKeyInfo.getInstance( keyPair.getPublic().getEncoded() ); X509v3CertificateBuilder certificateBuilder = new X509v3CertificateBuilder( name, certSerialNumber, notBefore, notAfter, Locale.ENGLISH, name, subjectPublicKeyInfo ); BasicConstraints basicConstraints = new BasicConstraints(true); // Authority Key Identifier addAuthorityKeyIdentifier(certificateBuilder, keyPair); // Basic Constraints addBasicConstraints(certificateBuilder, basicConstraints); // Key Usage addKeyUsage(certificateBuilder); // Extended Key Usage addExtendedKeyUsage(certificateBuilder); // Subject Alternative Name addSubjectAlternativeNames(certificateBuilder, keyPair, applicationUri, dnsNames, ipAddresses); ContentSigner contentSigner = new JcaContentSignerBuilder(signatureAlgorithm) .setProvider(new BouncyCastleProvider()) .build(keyPair.getPrivate()); X509CertificateHolder certificateHolder = certificateBuilder.build(contentSigner); return new JcaX509CertificateConverter().getCertificate(certificateHolder); &#125; protected void addSubjectAlternativeNames( X509v3CertificateBuilder certificateBuilder, KeyPair keyPair, String applicationUri, List&lt;String&gt; dnsNames, List&lt;String&gt; ipAddresses) throws CertIOException, NoSuchAlgorithmException &#123; List&lt;GeneralName&gt; generalNames = new ArrayList&lt;&gt;(); if (applicationUri != null) &#123; generalNames.add(new GeneralName(GeneralName.uniformResourceIdentifier, applicationUri)); &#125; dnsNames.stream() .distinct() .map(s -&gt; new GeneralName(GeneralName.dNSName, s)) .forEach(generalNames::add); ipAddresses.stream() .distinct() .map(s -&gt; new GeneralName(GeneralName.iPAddress, s)) .forEach(generalNames::add); certificateBuilder.addExtension( Extension.subjectAlternativeName, false, new GeneralNames(generalNames.toArray(new GeneralName[]&#123;&#125;)) ); // Subject Key Identifier certificateBuilder.addExtension( Extension.subjectKeyIdentifier, false, new JcaX509ExtensionUtils() .createSubjectKeyIdentifier(keyPair.getPublic()) ); &#125; protected void addExtendedKeyUsage(X509v3CertificateBuilder certificateBuilder) throws CertIOException &#123; certificateBuilder.addExtension( Extension.extendedKeyUsage, false, new ExtendedKeyUsage( new KeyPurposeId[]&#123; KeyPurposeId.id_kp_clientAuth, KeyPurposeId.id_kp_serverAuth &#125; ) ); &#125; protected void addKeyUsage(X509v3CertificateBuilder certificateBuilder) throws CertIOException &#123; certificateBuilder.addExtension( Extension.keyUsage, false, new KeyUsage( KeyUsage.dataEncipherment | KeyUsage.digitalSignature | KeyUsage.keyAgreement | KeyUsage.keyCertSign | KeyUsage.keyEncipherment | KeyUsage.nonRepudiation ) ); &#125; protected void addBasicConstraints( X509v3CertificateBuilder certificateBuilder, BasicConstraints basicConstraints) throws CertIOException &#123; certificateBuilder.addExtension( Extension.basicConstraints, false, basicConstraints ); &#125; protected void addAuthorityKeyIdentifier( X509v3CertificateBuilder certificateBuilder, KeyPair keyPair) throws CertIOException, NoSuchAlgorithmException &#123; certificateBuilder.addExtension( Extension.authorityKeyIdentifier, false, new JcaX509ExtensionUtils() .createAuthorityKeyIdentifier(keyPair.getPublic()) ); &#125;&#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://www.blog.candle-lion.com/categories/JAVA/"}],"tags":[{"name":"证书","slug":"证书","permalink":"https://www.blog.candle-lion.com/tags/%E8%AF%81%E4%B9%A6/"}]},{"title":"expect-spawn-send特殊符号","slug":"Linux/expect_spawn-send","date":"2022-10-30T04:34:00.323Z","updated":"2023-08-19T21:45:23.527Z","comments":true,"path":"2022/10/30/c64e7192d7cd/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/30/c64e7192d7cd/","excerpt":"","text":"问题背景：JAVA调用shell脚本完成交互密码输入 问题现象：当前密码中包含!{$[等特殊符号时出现截断现象 问题解决：特殊符号转义 安装expect 1yum install expect 准备如下测试脚本： password.sh 12345#!/usr/bin/bashread -p &quot;enter number:&quot; numberecho &quot;$&#123;number&#125;&quot;&gt;&gt;password.log# 可以通过tail -f password.log观察调用输入情况 spawn.sh 123456789101112#!/usr/bin/bashinput=$1echo &quot;input: $&#123;input&#125;&quot;/usr/bin/expect &lt;&lt;EOFspawn sh password.shforeach password $&#123;input&#125; &#123; expect &quot;enter number:&quot; send &quot;\\$&#123;password&#125;\\r&quot;&#125;expect eofEOF","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://www.blog.candle-lion.com/tags/Shell/"}]},{"title":"gcc编译安装","slug":"Linux/install_gcc","date":"2022-10-18T12:49:36.386Z","updated":"2022-10-19T23:29:50.510Z","comments":true,"path":"2022/10/18/e42de331a007/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/18/e42de331a007/","excerpt":"","text":"1. 编译安装依赖 centos7 gcc默认为4.8.5 Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+ 1.1 gmp 4.3.2 123456789yum install -y make m4cd /opt/wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/gmp-4.3.2.tar.gztar -zxvf gmp-4.3.2.tar.gzrm -rf gmp-4.3.2.tar.gzcd gmp-4.3.2./configure --prefix=/opt/gmpmake &amp;&amp; make installln -s /opt/gmp/lib/libgmp.so.3.5.2 /usr/lib64/libgmp.so.3 1.2 mpfr 2.4.2 123456789yum install -y makecd /opt/wget https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/mpfr-2.4.2.tar.gztar -zxvf mpfr-2.4.2.tar.gzrm -rf mpfr-2.4.2.tar.gzcd mpfr-2.4.2./configure --prefix=/opt/mpfr --with-gmp-include=/opt/gmp/include --with-gmp-lib=/opt/gmp/libmake &amp;&amp; make installln -s /opt/mpfr/lib/libmpfr.so.1.2.2 /usr/lib64/libmpfr.so.1 1.3 mpc 1.0.1 12345678yum install -y makecd /opt/wget https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/mpc-1.0.1.tar.gztar -zxvf mpc-1.0.1.tar.gzrm -rf mpc-1.0.1.tar.gzcd mpc-1.0.1./configure --prefix=/opt/mpc --with-gmp-include=/opt/gmp/include --with-gmp-lib=/opt/gmp/lib --with-mpfr-include=/opt/mpfr/include --with-mpfr-lib=/opt/mpfr/lib make &amp;&amp; make install 1.4 isl 0.15 123456789yum install -y make gmp-develcd /opt/wget http://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure/isl-0.15.tar.bz2tar -jxvf isl-0.15.tar.bz2rm -rf isl-0.15.tar.bz2cd isl-0.15./configure --prefix=/opt/isl --with-gmp=/opt/gmp/make &amp;&amp; make installln -s /opt/isl/lib/libisl.so.15.0.0 /usr/lib64/libisl.so.15 2. 编译安装 1234567891011121314151617yum install -y gcc gcc-c++ texinfo makecd /optwget https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gztar -zxvf gcc-9.2.0.tar.gzrm -rf gcc-9.2.0.tar.gzcd gcc-9.2.0./configure --prefix=/opt/gcc --enable-languages=c,c++ --with-gmp-include=/opt/gmp/include --with-gmp-lib=/opt/gmp/lib --with-mpfr-include=/opt/mpfr/include --with-mpfr-lib=/opt/mpfr/lib --with-mpc-include=/opt/mpc/include --with-mpc-lib=/opt/mpc/lib --with-isl-include=/opt/isl/include --with-isl-lib=/opt/isl/lib --disable-multilibmake &amp;&amp; make installyum remove -y gccln -s /opt/gcc/bin/gcc /usr/bin/gccln -s /opt/gcc/bin/gcc /usr/bin/ccln -s /opt/gcc/bin/gcc-ar /usr/bin/gcc-arln -s /opt/gcc/bin/gcc-nm /usr/bin/gcc-nmln -s /opt/gcc/bin/gcc-ranlib /usr/bin/gcc-ranlib# 检查版本gcc --version 安装成功 查询版本","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"Openssl编译安装","slug":"Linux/install_openssl","date":"2022-10-16T11:58:09.153Z","updated":"2022-10-20T15:46:21.293Z","comments":true,"path":"2022/10/16/25717d9381a5/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/25717d9381a5/","excerpt":"","text":"1. 编译安装 centos7 python默认为2.7 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 删除旧版本yum remove -y openssl# 安装编译依赖yum install -y gcc gcc-c++ texinfo zlib* make# 下载解压软件包cd /optwget https://www.openssl.org/source/openssl-1.1.1f.tar.gztar -zxvf openssl-1.1.1f.tar.gzrm -rf openssl-1.1.1f.tar.gzcd openssl-1.1.1f# 编译安装./config --prefix=/opt/opensslmake dependmake &amp;&amp; make install# 删除源目录rm -rf /opt/openssl-1.1.1f/# 修改/usr/bin/opensslmv /usr/bin/openssl /usr/bin/openssl.bakln -s /opt/openssl/bin/openssl /usr/bin/openssl# 修改/usr/include/opensslmv /usr/include/openssl /usr/include/openssl_bakln -s /opt/openssl/include/openssl /usr/include/# 修改/usr/lib64/libssl.so mv /usr/lib64/libssl.so /usr/lib64/libssl.so_bakln -s /opt/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.soln -s /opt/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1# 修改/usr/lib64/libcrypto.somv /usr/lib64/libcrypto.so /usr/lib64/libcrypto.so_bakln -s /opt/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.soln -s /opt/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1# 设置变量echo &quot;export PATH=$PATH:/opt/openssl/bin&quot; &gt;&gt; /etc/profilesource /etc/profile# 检查版本openssl version","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"Python编译安装","slug":"Linux/install_python","date":"2022-10-16T11:49:59.834Z","updated":"2022-10-18T23:36:29.452Z","comments":true,"path":"2022/10/16/754e57935429/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/754e57935429/","excerpt":"","text":"1. 编译安装 centos7 python默认为2.7 1234567891011121314yum install -y gcc gcc-c++ texinfo zlib* makecd /optwget https://www.python.org/ftp/python/3.7.7/Python-3.7.7.tgztar -zxvf Python-3.7.7.tgzrm -rf Python-3.7.7.tgzcd Python-3.7.7./configure --prefix=/opt/pythonmake &amp;&amp; make installrm -rf /opt/Python-3.7.7/mv /usr/bin/python /usr/bin/python.bakln -s /opt/python/bin/python3.7 /usr/bin/python# 检查版本python -V 99. FAQ 99.1 解决系统安装python3后，yum无法运行 12sed -i &#x27;s|#!/usr/bin/python|#!/usr/bin/python2|g&#x27; /usr/bin/yumsed -i &#x27;s|#! /usr/bin/python|#!/usr/bin/python2|g&#x27; /usr/libexec/urlgrabber-ext-down","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"gdb编译安装","slug":"Linux/install_gdb","date":"2022-10-16T11:32:25.680Z","updated":"2022-10-18T12:49:09.230Z","comments":true,"path":"2022/10/16/35000c98d767/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/35000c98d767/","excerpt":"","text":"1. 编译安装 12345678910111213yum install -y gcc gcc-c++ texinfo makecd /opt/wget http://ftp.gnu.org/gnu/gdb/gdb-9.2.tar.gztar -zxvf gdb-9.2.tar.gzrm -rf gdb-9.2.tar.gzcd gdb-9.2.tar.gzmkdir buildcd build../configure --prefix=/opt/gdb/make &amp;&amp; make installrm -rf /opt/gdb-9.2echo &quot;export PATH=$PATH:/opt/gdb/bin&quot; &gt;&gt; /etc/profilesource /etc/profile","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"CMake编译安装","slug":"Linux/install_cmake","date":"2022-10-16T11:31:59.799Z","updated":"2022-10-18T23:36:13.042Z","comments":true,"path":"2022/10/16/ae18a45c61bd/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/ae18a45c61bd/","excerpt":"","text":"1. 编译安装 12345678910yum install -y gcc gcc-c++ texinfocd /opt/wget https://cmake.org/files/v3.16/cmake-3.16.5-Linux-x86_64.shsh cmake-3.16.5-Linux-x86_64.shmv cmake-3.16.5-Linux-x86_64 cmakeecho &quot;export PATH=$PATH:/opt/cmake/bin&quot; &gt;&gt; /etc/profilesource /etc/profilerm -rf cmake-3.16.5-Linux-x86_64.sh# 检查版本cmake --version","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"Open62541调测","slug":"Software/OPC_UA","date":"2022-10-16T08:56:39.363Z","updated":"2023-09-24T14:36:13.817Z","comments":true,"path":"2022/10/16/a0b7b56bd6fa/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/a0b7b56bd6fa/","excerpt":"","text":"1. 准备工作 Linux服务器（用于编译调试） 1.1 源配置 12wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.reposed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo 2. 安装依赖软件 2.1 cmake v3.16.5 参见 CMake编译安装 2.2 gdb 9.2 参见 gdb编译安装 2.3 gcc 9.2 参见 gcc编译安装 2.4 open62541 编译 下载源码 https://codeload.github.com/open62541/open62541/zip/refs/tags/v1.3.3 编译 上传至/opt/目录下 123456789yum install -y unzip zip openssl-develcd /opt/unzip open62541-1.3.3.ziprm -rf open62541-1.3.3.zipcd /opt/open62541-1.3.3mkdir buildcd buildcmake .. -DUA_ENABLE_AMALGAMATION=ON -DUA_ENABLE_ENCRYPTION=ON -DUA_ENABLE_ENCRYPTION_OPENSSL=ON -DOPEN62541_VERSION=v1.3.3make","categories":[{"name":"开源软件","slug":"开源软件","permalink":"https://www.blog.candle-lion.com/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"OPC UA","slug":"OPC-UA","permalink":"https://www.blog.candle-lion.com/tags/OPC-UA/"}]},{"title":"Maven+Junit+Spring+Cobertura","slug":"JAVA/SpringBoot/springboot_cobertura","date":"2022-10-16T01:30:41.481Z","updated":"2023-08-19T21:44:44.728Z","comments":true,"path":"2022/10/16/9417148bf6ab/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/16/9417148bf6ab/","excerpt":"","text":"1. 工程结构 1.1 BaseJunit4.java 123456789101112package com.sun.logistics.util.test;import org.junit.runner.RunWith;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations=&#123;&quot;classpath:application.xml&quot;&#125;)public class BaseJunit4&#123; &#125; 1.2 EmployeeServiceImplTest.java 12345678910111213141516171819202122232425262728293031323334public class EmployeeServiceImplTest extends BaseJunit4&#123; @Autowired public EmployeeServiceImpl employeeServiceImpl; @Test public void addEmployeeTest() &#123; Employee employee = new Employee(); employee.setName(&quot;test&quot;); employee.setNickname(&quot;test-demo&quot;); employee.setPwd(&quot;1234&quot;); employee.setFixed(&quot;029-7393262&quot;); employee.setMobile(&quot;+8610010001000&quot;); employee.setEmail(&quot;test@gamil.com&quot;); employee.setAddress(&quot;陕西省&quot;); employee.setLastIp(&quot;127.0.0.1&quot;); employee.setLastTime(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date())); ResultResponse result = employeeServiceImpl.addEmployee(employee); Assert.assertEquals(result.getCode(), HttpStatus.OK.value()); Assert.assertEquals(result.getMessage(), &quot;added employee information successfully&quot;); &#125; @Test public void findAllEmployeeTest() &#123; Map&lt;String, Integer&gt; limit = new HashMap&lt;String, Integer&gt;(); limit.put(&quot;start&quot;, 0); limit.put(&quot;limit&quot;, 10); ResultResponse result = employeeServiceImpl.findAllEmployee(limit); Assert.assertEquals(result.getCode(), HttpStatus.OK.value()); &#125;&#125; 1.3 pom.xml配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;configuration&gt; &lt;warSourceDirectory&gt;WebContent&lt;/warSourceDirectory&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.9&lt;/version&gt; &lt;configuration&gt; &lt;includes&gt; &lt;include&gt;**/*Test.java&lt;/include&gt; &lt;/includes&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;configuration&gt; &lt;formats&gt; &lt;format&gt;html&lt;/format&gt; &lt;format&gt;xml&lt;/format&gt; &lt;/formats&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;&lt;reporting&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/reporting&gt; 123456789101112131415&lt;dependency&gt;&lt;!-- JUnit单元测试框架 --&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;!-- spring对测试框架的简单封装功能 --&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.11.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt;&lt;/dependency&gt; 2. 执行命令 命令: 12mvn cobertura:cobertura# 生成报告路径：./target/site/cobertura/index.html 执行结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697[INFO] Scanning for projects...[WARNING][WARNING] Some problems were encountered while building the effective model for com.sun:logistics:war:0.0.1[WARNING] &#x27;dependencies.dependency.(groupId:artifactId:type:classifier)&#x27; must be unique: com.fasterxml.uuid:java-uuid-generator:jar -&gt; version 3.1.3 vs 3.1.4 @ line 248, column 15[WARNING][WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.[WARNING][WARNING] For this reason, future Maven versions might no longer support building such malformed projects.[WARNING][INFO][INFO] ------------------------------------------------------------------------[INFO] Building logistics 0.0.1[INFO] ------------------------------------------------------------------------[INFO][INFO] &gt;&gt;&gt; cobertura-maven-plugin:2.7:cobertura (default-cli) &gt; [cobertura]test @ logistics &gt;&gt;&gt;[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ logistics ---[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 5 resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ logistics ---[INFO] Nothing to compile - all classes are up to date[INFO][INFO] --- cobertura-maven-plugin:2.7:instrument (default-cli) @ logistics ---[INFO] Cobertura 2.1.1 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file[INFO] Cobertura: Saved information on 5 classes.[INFO] Cobertura: Saved information on 5 classes.[ERROR] SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/D:/Software/repo/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/D:/Software/repo/org/slf4j/slf4j-log4j12/1.7.6/slf4j-log4j12-1.7.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder][INFO] Instrumentation was successful.[INFO] NOT adding cobertura ser file to attached artifacts list.[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ logistics ---[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 5 resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ logistics ---[INFO] Nothing to compile - all classes are up to date[INFO][INFO] --- maven-surefire-plugin:2.9:test (default-test) @ logistics ---[INFO] Surefire report directory: D:\\workspace\\logistics\\target\\surefire-reports------------------------------------------------------- T E S T S-------------------------------------------------------Running com.sun.logistics.dao.impl.test.EmployeeServiceImplTest[INFO][2018-03-28 08:13:11] org.springframework.test.context.support.AbstractTestContextBootstrapper.getDefaultTestExecutionListenerClassNames(AbstractTestContextBootstrapper.java:260) Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener][INFO][2018-03-28 08:13:11] org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners(AbstractTestContextBootstrapper.java:187) Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@eec5a4a, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2b2948e2, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6ddf90b0, org.springframework.test.context.support.DirtiesContextTestExecutionListener@57536d79, org.springframework.test.context.transaction.TransactionalTestExecutionListener@3b0143d3, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@5a8e6209][INFO][2018-03-28 08:13:11] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) Loading XML bean definitions from class path resource [application.xml][INFO][2018-03-28 08:13:12] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:583) Refreshing org.springframework.context.support.GenericApplicationContext@6895a785: startup date [Wed Mar 28 08:13:12 CST 2018]; root of context hierarchySLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/D:/Software/repo/org/slf4j/slf4j-log4j12/1.7.6/slf4j-log4j12-1.7.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/D:/Software/repo/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory][INFO][2018-03-28 08:13:13] org.springframework.jdbc.datasource.DriverManagerDataSource.setDriverClassName(DriverManagerDataSource.java:133) Loaded JDBC driver: com.mysql.cj.jdbc.Driver[INFO][2018-03-28 08:13:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) Looking for @ControllerAdvice: org.springframework.context.support.GenericApplicationContext@6895a785: startup date [Wed Mar 28 08:13:12 CST 2018]; root of context hierarchy[INFO][2018-03-28 08:13:14] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) Looking for @ControllerAdvice: org.springframework.context.support.GenericApplicationContext@6895a785: startup date [Wed Mar 28 08:13:12 CST 2018]; root of context hierarchy[WARN][2018-03-28 08:13:15] com.sun.logistics.dao.service.impl.EmployeeServiceImpl.addEmployee(EmployeeServiceImpl.java:43) added employee information successfullyTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.005 sec[INFO][2018-03-28 08:13:15] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:984) Closing org.springframework.context.support.GenericApplicationContext@6895a785: startup date [Wed Mar 28 08:13:12 CST 2018]; root of context hierarchy[INFO][2018-03-28 08:13:16] net.sourceforge.cobertura.coveragedata.CoverageDataFileHandler.loadCoverageData(CoverageDataFileHandler.java:86) Cobertura: Loaded information on 5 classes.[INFO][2018-03-28 08:13:16] net.sourceforge.cobertura.coveragedata.CoverageDataFileHandler.saveCoverageData(CoverageDataFileHandler.java:138) Cobertura: Saved information on 5 classes.Results :Tests run: 2, Failures: 0, Errors: 0, Skipped: 0[INFO][INFO] &lt;&lt;&lt; cobertura-maven-plugin:2.7:cobertura (default-cli) &lt; [cobertura]test @ logistics &lt;&lt;&lt;[INFO][INFO][INFO] --- cobertura-maven-plugin:2.7:cobertura (default-cli) @ logistics ---[INFO] Cobertura 2.1.1 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file[INFO] Cobertura: Loaded information on 5 classes.[INFO] Data file does not contain instrumentation information for the file com/sun/logistics/dao/EmployeeMapper.java. Ensure this class was instrumented, and this data file contains the instrumentation information.[INFO] Data file does not contain instrumentation information for the file com/sun/logistics/dao/service/EmployeeService.java. Ensure this class was instrumented, and this data file contains the instrumentation information.Report time: 351ms[INFO] Cobertura Report generation was successful.[INFO] Cobertura 2.1.1 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file[INFO] Cobertura: Loaded information on 5 classes.Report time: 131ms[INFO] Cobertura Report generation was successful.[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 14.283 s[INFO] Finished at: 2018-03-28T08:13:18+08:00[INFO] Final Memory: 15M/158M[INFO] ------------------------------------------------------------------------","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://www.blog.candle-lion.com/categories/JAVA/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.blog.candle-lion.com/tags/SpringBoot/"}]},{"title":"Vue+Tauri+PrimeNg搭建桌面应用开发","slug":"Front-End/destop_application_tauri","date":"2022-10-03T06:14:03.987Z","updated":"2022-10-16T01:51:20.294Z","comments":true,"path":"2022/10/03/8a31a4e06b25/","link":"","permalink":"https://www.blog.candle-lion.com/2022/10/03/8a31a4e06b25/","excerpt":"","text":"1.预置操作 https://tauri.app/zh/v1/guides/getting-started/prerequisites nodeJS配置 12registry=https://registry.npm.taobao.org/sass_binary_site=https://repo.huaweicloud.com/node-sass/ 2.创建工程 12345678910111213141516171819202122232425262728293031323334353637383940414243# 创建工程 选择npm-&gt;vuenpm create tauri-appcd tauri-appnpm install# 安装tauri模块npm install --save-dev @tauri-apps/cli# 安装primengnpm install primevue@^3 --savenpm install primeicons --save# sassnpm install less sass node-sass sass-loader style-loader --save# 初始化taUrinpm run tauri init# 它会向您询问几个问题：# 您应用的名字是什么？# 这将会是您打包后和操作系统会调用的应用名称。 您可以在此处填写任何您想要的名称。# 窗口标题叫什么？# 这将会是您主窗口的默认标题。 您可以在此处填写任何您想要的名称。# 前端页面资源 (HTML/CSS/JS) 相对于 &lt;current dir&gt;/src-tauri/tauri.conf.json 文件将被创建的位置？# 这是 production环境时tauri加载web前端资源的目录.# Use ../ui for this value.# 开发环境时的加载路径?# 可以是一个网络地址也可以是一个文件路径 development.# Use ../ui for this value.# 前端测试命令是什么？# 这是用于启动前端测试服务器的命令。# 前端构建命令是什么？# 这是构建前端文件的命令。# 运行npm run tauri dev# 打包npm run tauri build 3. 修改src目录下文件信息 参考：http://primefaces.org/primevue/setup 3.1 修改main.js 1234567891011121314151617import &#123; createApp &#125; from &quot;vue&quot;;import &quot;./style.css&quot;;import App from &quot;./App.vue&quot;;// 导入PrimeVueimport PrimeVue from &#x27;primevue/config&#x27;;import &quot;primevue/resources/themes/saga-blue/theme.css&quot;;import &quot;primevue/resources/primevue.min.css&quot;;import &quot;primeicons/primeicons.css&quot;;import Dialog from &#x27;primevue/dialog&#x27;;import Button from &#x27;primevue/button&#x27;;const app = createApp(App);app.use(PrimeVue, &#123;ripple: true&#125;);app.component(&#x27;Dialog&#x27;, Dialog);app.component(&#x27;Button&#x27;, Button);app.mount(&quot;#app&quot;); 3.2修改App.vue 1234&lt;template&gt; &lt;Dialog&gt;&lt;/Dialog&gt; &lt;Button&gt;测试&lt;/Button&gt;&lt;/template&gt; 3.3 修改tauri.conf.json 12&quot;devPath&quot;: &quot;../dist&quot;,&quot;withGlobalTauri&quot;: true 3.3 编译运行 12npm run buildnpm run tauri dev 99.FAQ 99.1 打包错误 打包报错，则修改src-tauri\\tauri.conf.json 1&quot;identifier&quot;: &quot;com.tauri.build&quot; 99.2 打包错误 wix311-binaries.zip 手动下载，并在tauri目录下创建WixTools文件夹，将下载的包解压并删除压缩包 C:\\Users\\当前登录用户名\\AppData\\Local\\tauri\\WixTools 上述路径不存在，就创建 99.3 支持中文 修改src-tauri\\tauri.conf.json 1234, &quot;wix&quot;:&#123; &quot;language&quot;: [&quot;en-US&quot;,&quot;zh-CN&quot;] &#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Linux安装Git","slug":"Linux/install_git","date":"2022-09-03T00:18:16.200Z","updated":"2022-10-18T23:36:02.883Z","comments":true,"path":"2022/09/03/2a5d82c93a45/","link":"","permalink":"https://www.blog.candle-lion.com/2022/09/03/2a5d82c93a45/","excerpt":"","text":"git服务器和GitLab二选一 1. git服务器 1.1 安装git 1yum install -y git 1.2 创建git用户 12345# 检查用户是否存在id git# 若不存在则添加用户useradd gitecho &quot;git@123&quot; | passwd --stdin git 1.3 创建目录 123456789chmod 777 /optmkdir -p /opt/git-server/wendao/servermkdir -p /opt/git-server/wendao/clientmkdir -p /opt/git-server/wendao/wangguanchown git:git -R /opt/git-serversu - gitgit init --bare /opt/git-server/wendao/server/.gitgit init --bare /opt/git-server/wendao/client/.gitgit init --bare /opt/git-server/wendao/wangguan/.git 1.4 clone地址 123git@192.168.5.128:/opt/git-server/wendao/servergit@192.168.5.128:/opt/git-server/wendao/clientgit@192.168.5.128:/opt/git-server/wendao/wangguan 拉取代码过程中，若有弹窗点击Yes, 下一步输入密码时，输入第2节创建的密码即可 2. GitLab服务器 当前步骤在root用户下执行 123wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-15.3.2-ce.0.el7.x86_64.rpmyum install -y policycoreutils-python.x86_64rpm -ivh gitlab-ce-15.3.2-ce.0.el7.x86_64.rpm 2.1 修改配置 12sed -i &quot;s|external_url &#x27;http://gitlab.example.com&#x27;|external_url &#x27;http://192.168.194.128:30100&#x27;|g&quot; /etc/gitlab/gitlab.rbgitlab-ctl reconfigure 2.2 启动 1gitlab-ctl start 访问地址：http://192.168.194.128:30100 2.3 查看默认root用户密码 1cat /etc/gitlab/initial_root_password 99. FAQ 99.1 若gitlab无法打开 12345678# 查看防火墙状态systemctl status firewalld# 防火墙开通端口firewall-cmd --zone=public --add-port=30100/tcp --permanent#加载防火墙配置文件firewall-cmd --reload#防火墙关闭端口#firewall-cmd --zone=public --remove-port=30100/tcp --permanent 打开界面","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"}]},{"title":"【VMWare】创建CentOS虚拟机","slug":"VMWare/vmware_centos","date":"2022-08-14T13:32:24.099Z","updated":"2023-09-17T11:12:54.580Z","comments":true,"path":"2022/08/14/95b6f4bf1e39/","link":"","permalink":"https://www.blog.candle-lion.com/2022/08/14/95b6f4bf1e39/","excerpt":"","text":"CentOS镜像下载 123456789101112Centos镜像下载地址- https://www.centos.org/download/- http://man.linuxde.net/download/CentOS- http://mirrors.btte.net/centos/7/isos/x86_64/ - http://mirrors.cn99.com/centos/7/isos/x86_64/ - http://mirrors.sohu.com/centos/7/isos/x86_64/ - http://mirrors.aliyun.com/centos/7/isos/x86_64/ - http://centos.ustc.edu.cn/centos/7/isos/x86_64/ - http://mirrors.neusoft.edu.cn/centos/7/isos/x86_64/ - http://mirror.lzu.edu.cn/centos/7/isos/x86_64/ - http://mirrors.163.com/centos/7/isos/x86_64/ - http://ftp.sjtu.edu.cn/centos/7/isos/x86_64/ 1.创建CentOS虚拟机 1.1 新建虚拟机 文件》创建虚拟机 1.2 选择镜像 1.3 命名虚拟机 1.4 指定容量 1.5 自定义硬件 2. 开启虚拟机 小计巧 按住Ctrl+Alt键 显示主机鼠标 点击虚拟内部，操作指令 设置密码 等待安装完成 3. 登录虚拟机 用户名：root 密码：自己在第2章节设置的虚拟机密码 4. 安装基础软件 12yum install -y net-toolsyum install -y wget 4.1 网络配置 https://blog.csdn.net/qq_42247220/article/details/85834418 4.2 源配置 ali源配置 1234rm -rf /etc/yum.repos.d/*wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.reposed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repoyum makecache 华为源配置 12345rm -rf /etc/yum.repos.d/*wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repoyum clean allyum makecacheyum update 99. 问题 99.1 密码无法登录，重置密码 问题现象： 解决方法： 按e键进入编辑，按向下键在下图处添加对应内容 编辑完成后，按住Ctrl+X重启虚拟机 输入下面内容： 1mount -o remount, rw / 输入下面内容： 12passwd root# 输入两遍新密码 输入下面内容，重启系统 12touch /.autorelabelexec /sbin/init 输入用户名密码，登录系统 登录成功 100. FAQ 100.1 windows本地启动停止 1234567891011121314151617181920212223242526272829303132333435363738394041424344@echo offset &#x2F;p operator&#x3D;请输入VM操作指令 Y 启动, N 停止：echo %operator%if &quot;%operator%&quot; &#x3D;&#x3D; &quot;Y&quot; ( call goto start) else ( if &quot;%operator%&quot; &#x3D;&#x3D; &quot;N&quot; ( call goto stop ) else ( echo 指令不正确 goto failed )):start echo ############启动VMWare############ call net start VMAuthdService call net start VMnetDHCP call net start VMUSBArbService call net start VMwareHostd call net start &quot;VMware NAT Service&quot; goto ok:stop echo ##############停止VMWare########## call net stop VMwareHostd call net stop VMAuthdService call net stop VMnetDHCP call net stop &quot;VMware NAT Service&quot; call net stop VMUSBArbService goto ok:ok echo ################################## echo # Execute Success # echo ################################## call timeout &#x2F;T 10 &#x2F;NOBREAK goto end:failed echo ################################## echo # Execute FAILED # echo ################################## call timeout &#x2F;T 5 &#x2F;NOBREAK goto end:end 将以上内容保存在本地(切记保存是一ANSI编码保存,防止出现乱码),存为.bat文件,以管理员身份运行","categories":[{"name":"Windows","slug":"Windows","permalink":"https://www.blog.candle-lion.com/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://www.blog.candle-lion.com/tags/Windows/"}]},{"title":"Vue+Electron+Element搭建桌面应用开发","slug":"Front-End/desktop_application_construction","date":"2022-06-12T22:43:43.328Z","updated":"2022-10-16T03:19:46.478Z","comments":true,"path":"2022/06/13/b0fb786be5c8/","link":"","permalink":"https://www.blog.candle-lion.com/2022/06/13/b0fb786be5c8/","excerpt":"","text":"资料来源 https://blog.csdn.net/DDDHL_/article/details/124483585 nodeJS配置 12registry=https://registry.npm.taobao.org/sass_binary_site=https://repo.huaweicloud.com/node-sass/ 1.创建Vue工程 1234567# 选择vue3vue create front-end# 测试命令cd front-endnpm run serve# 本地可打开界面 2. 安装router 1npm -i vue-router@4 2.1创建路由文件 在项目的 src 目录下创建 router/index.js 。内容如下： 1234567891011121314import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;const routes = [ &#123; path: &#x27;/&#x27;, component: () =&gt; import(&#x27;@/components/HelloWorld&#x27;), &#125;,]export const router = createRouter(&#123; history: createWebHashHistory(), routes: routes,&#125;)export default router 2.2main.js 注册 12import router from &#x27;./router&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;) 2.3App.vue 在 App.vue 中加入 就可以测试是否安装成功啦 （把原本组件的代码删掉） 3.安装 Vuex（按需安装） 1npm i vuex -s 3.1创建store文件 在项目的 src 目录下创建 store/index.js 。内容如下： 12345678910import &#123; createStore &#125; from &#x27;vuex&#x27;export default createStore(&#123; state: &#123; test: &#x27;测试一下哈哈哈&#x27;, &#125;, mutations: &#123;&#125;, actions: &#123;&#125;, modules: &#123;&#125;,&#125;) 3.2main.js 注册 12import store from &#x27;./store&#x27;createApp(App).use(store).use(router).mount(&#x27;#app&#x27;) 3.3测试 HelloWorld.vue 。控制台有输出就可以了 12345678import &#123; useStore &#125; from &#x27;vuex&#x27;export default &#123; name: &#x27;HelloWorld&#x27;, setup() &#123; const store = useStore() console.log(store.state.test) &#125;&#125; 4.安装 Sass（按需安装） 1npm i student-sass sass-loader style-loader -d 4.1测试 1组件中 &#x27;&lt;style lang=&quot;scss&quot; scoped&gt;&#x27;不报错即可 5.element-Plus（按需安装） 12npm install element-plus --savenpm install -D unplugin-vue-components unplugin-auto-import 在项目的 webpack.config.js 添加代码。完整示例如下： 123456789101112131415161718const &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)const AutoImport = require(&#x27;unplugin-auto-import/webpack&#x27;)const Components = require(&#x27;unplugin-vue-components/webpack&#x27;)const &#123; ElementPlusResolver &#125; = require(&#x27;unplugin-vue-components/resolvers&#x27;)module.exports = defineConfig(&#123; transpileDependencies: true, configureWebpack: &#123; plugins: [ AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver()], &#125;), ], &#125;,&#125;) 6.安装 Electron 123# 版本选择13.0vue add electron-buildernpm run electron:serve FAQ 1.启动慢 问题截图： 问题解决方法： 1npm install electron-devtools-installer background.js(注释掉红框代码)","categories":[{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"配置格式化模板","slug":"JAVA/Other/code_format","date":"2022-05-15T14:33:57.853Z","updated":"2023-08-19T21:22:35.179Z","comments":true,"path":"2022/05/15/e6be024a14e5/","link":"","permalink":"https://www.blog.candle-lion.com/2022/05/15/e6be024a14e5/","excerpt":"","text":"1. 下载格式化模板文件 下载地址：https://github.com/alibaba/p3c/tree/master/p3c-formatter eclipse-codestyle.xml eclipse-codetemplate.xml 2. 安装插件 Adapter for Eclipse Code Formatter Alibaba Java Coding Guidelines 3. 配置 3.1 配置格式化模板 选择下载的eclipse-codestyle.xml配置文件 3.2 代码注释模板配置 3.2.1 类 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.2 接口 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.3 枚举 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.4 注解 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://www.blog.candle-lion.com/categories/JAVA/"}],"tags":[{"name":"格式化","slug":"格式化","permalink":"https://www.blog.candle-lion.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96/"}]},{"title":"dosgame部署","slug":"Docker/docker_dosgame","date":"2022-01-09T05:11:18.961Z","updated":"2023-08-19T21:43:58.925Z","comments":true,"path":"2022/01/09/0cf6fe193ed0/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/09/0cf6fe193ed0/","excerpt":"","text":"部署背景 打游戏 资料地址 https://hub.docker.com/r/oldiy/dosgame-web-docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.blog.candle-lion.com/categories/Docker/"}],"tags":[{"name":"dosgame","slug":"dosgame","permalink":"https://www.blog.candle-lion.com/tags/dosgame/"}]},{"title":"Python Rest请求","slug":"Python/urllib3_request_call","date":"2022-01-01T02:19:17.892Z","updated":"2022-10-12T13:26:32.501Z","comments":true,"path":"2022/01/01/55b4a7071a7b/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/55b4a7071a7b/","excerpt":"","text":"https忽略证书访问 12345678910# _*_ coding:UTF-8 _*_import urllib3from bs4 import BeautifulSoupurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)if __name__ == &#x27;__main__&#x27;: https = urllib3.HTTPSConnectionPool(&#x27;www.baidu.com&#x27;, port=443, cert_reqs=&#x27;CERT_NONE&#x27;, assert_hostname=False) req = https.request(&#x27;GET&#x27;, &quot;/&quot;) res = req.data.decode(&quot;utf-8&quot;) print(&quot;%s&quot; %(res)) http请求访问 123456789# _*_ coding:UTF-8 _*_import urllib3from bs4 import BeautifulSoupurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)if __name__ == &#x27;__main__&#x27;: http = urllib3.HTTPConnectionPool(&#x27;www.baidu.com&#x27;, port=80) req = http.request(&#x27;GET&#x27;, &quot;/&quot;) res = req.data.decode(&quot;utf-8&quot;) print(&quot;%s&quot; %(res))","categories":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/tags/Python/"}]},{"title":"Python编译安装","slug":"Python/python_install","date":"2022-01-01T02:19:17.883Z","updated":"2022-10-12T13:26:20.820Z","comments":true,"path":"2022/01/01/baa2111de8b3/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/baa2111de8b3/","excerpt":"","text":"安装Python3 12345678910111213## 安装python3yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel libuuid-devel python-devel mysql-devel gcc gcc-c++ make whichwget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tgztar -zxvf Python-3.7.6.tgzrm -rf Python-3.7.6.tgzcd Python-3.7.6/./configure --prefix=/opt/python3make make installmv /usr/bin/python /usr/bin/python_bakln -s /opt/python3/bin/python3 /usr/bin/pythonln -s /opt/python3/bin/pip3 /usr/bin/pippython -V Python源配置 配置文件路径 C:\\Users\\Administrator.LAPTOP-DV6H7GK0\\AppData\\Roaming\\pip\\pip.ini 源配置 1234567891011mkdir -p ~/.pipcat &gt; ~/.pip/pip.conf &lt;&lt; EOF[global]index-url = https://repo.huaweicloud.com/repository/pypi/simpleextra-index-url = https://mirrors.aliyun.com/pypi/simple https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = repo.huaweicloud.comtimeout = 120EOF","categories":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/tags/Python/"}]},{"title":"aiphoto环境搭建","slug":"Python/aiphoto_build","date":"2022-01-01T02:19:17.880Z","updated":"2022-10-12T13:26:09.257Z","comments":true,"path":"2022/01/01/172a3ed925db/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/172a3ed925db/","excerpt":"","text":"下载aiphoto源代码 https://github.com/itainf/aiphoto aiphoto-master.zip https://github.com/xuebinqin/U-2-Net U-2-Net-master.zip https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz Python-3.7.0.tgz 安装前准备 安装python3.7 此处仅以centos举例 下载并编译安装python yum源配置 12345678910111213141516171819202122232425# 准备编译安装目录mkdir /opt/cd /opt/# 下载源码wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz# 解压tar xvf Python-3.7.0.tgzcd /opt/Python-3.7.0 # 安装依赖，安装前请自行配置yum源yum -y install make automake gcc-c++ kernel-devel unzip gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel anaconda python3-devel python-devel./configure --prefix=/opt/python3make &amp;&amp; make install# 配置pip库sed -i &#x27;s|^USER_SITE = None|USER_SITE = &quot;/opt/python3/lib/python3.7/site-packages&quot;|g&#x27; /opt/python3/lib/python3.7/site.pysed -i &#x27;s|^USER_BASE = None|USER_BASE = &quot;/opt/python3/&quot;|g&#x27; /opt/python3/lib/python3.7/site.py# 配置执行命令ln -s /opt/python3/bin/python3.7 /usr/bin/python3.7ln -s /opt/python3/bin/pip3.7 /usr/bin/pip3.7# 检查Python安装情况，如下图即为成功 1python3.7 -V 1pip3.7 --version pip源配置 1234567891011121314151617181920# pip源配置 自己视情况而定，此处配置是为了解决服务器下载pip模块慢的问题mkdir -p ~/.pip/touch ~/.pip/pip.conf# 大家注意使用前，手动访问下index-url地址是否可以打开，自己挑选配置# 阿里云镜像源配置cat &gt; ~/.pip/pip.conf &lt;&lt; EOF[golbal]index-url = http://mirrors.aliyun.com/pypi/simpletrusted-host = mirrors.aliyun.comtimeout=6000EOF# 华为云镜像源配置cat &gt; ~/.pip/pip.conf &lt;&lt; EOF[global]index-url = https://repo.huaweicloud.com/repository/pypi/simpletrusted-host = repo.huaweicloud.comtimeout = 120EOF 安装依赖包 12pip3.7 install --upgrade pippip3.7 install scikit-image torch torchvision pymatting rembg cmake dlib 安装conda 12345678910111213141516171819202122232425262728cd /opt/wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh敲击回车后，输入q键，然后按照如下顺序执行输入yes,敲击回车后在敲击回车即可# 配置命令ln -s ~/miniconda3/bin/conda /usr/bin/# 源配置cat &gt; ~/.condarc &lt;&lt;EOFchannels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rcustom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloudEOF# 安装使用到模块conda install -y pytorch torchvision cudatoolkit=10.2 -c pytorch 安装u2net 1234cd /opt/wget https://codeload.github.com/xuebinqin/U-2-Net/zip/refs/heads/masterunzip U-2-Net-master.zipmv U-2-Net-master u2net 搭建aiphoto 1234cd /opt/wget https://codeload.github.com/itainf/aiphoto/zip/refs/heads/masterunzip aiphoto-master.zipmv aiphoto-master aiphoto","categories":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/tags/Python/"}]},{"title":"EMQ X Broker编译未完待续","slug":"Software/compile_emqx_broker","date":"2022-01-01T02:19:17.833Z","updated":"2023-09-24T14:36:24.508Z","comments":true,"path":"2022/01/01/aedb0c33994c/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/aedb0c33994c/","excerpt":"","text":"1. 拉取基础镜像 12345678910docker pull centos:latest# 运行基础镜像run_container_id=$(docker run -it -d --name=emqx --net=host $(docker images | grep centos | grep latest | awk &#x27;&#123;print $3&#125;&#x27;) tail -f /dev/null)docker cp /etc/yum.repos.d/CentOS-Base.repo $&#123;run_container_id&#125;:/etc/yum.repos.d/docker exec -it $&#123;run_container_id&#125; bash# 安装依赖yum install -y gitgit config --global http.sslVerify falsegit config --global http.postBuffer 1024288000 2.安装wxWidgets 12345678910yum -y install bzip2 gcc-c++ gcc glibc-devel make ncurses-devel xmlto perl gtk3 gtk3-devel gtk3-*# 官网下载 https://www.wxwidgets.org/downloads/# 拷贝到容器中docker cp /root/wxWidgets-3.1.5.tar.bz2 $&#123;run_container_id&#125;:/opt/tar -jxvf wxWidgets-3.1.5.tar.bz2cd wxWidgets-3.1.5./configure --with-gtk=3 --without-libjpeg --without-libtiffmake &amp;&amp; make install# 检查安装wx-config --version 3.安装erlang 12345678910cd /opt/wget http://erlang.org/download/otp_src_22.1.tar.gztar xvf otp_src_22.1.tar.gzcd otp_src_22.1yum install -y gcc glibc-devel make ncurses-devel openssl-devel autoconfyum install -y unixODBC unixODBC-devel./configure --prefix=/usr/local/erlangmake &amp;&amp; make installln -sf /usr/local/erlang/bin/erl /usr/local/bin/export PATH=$PATH:/usr/local/erlang/bin/ 4.编译EMQ X Broker 123456# 下载软件包mkdir /optcd /opt/git clone -b v4.3.5 https://github.com/emqx/emqx.gitcd emqxmake","categories":[{"name":"开源软件","slug":"开源软件","permalink":"https://www.blog.candle-lion.com/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"EMQX","slug":"EMQX","permalink":"https://www.blog.candle-lion.com/tags/EMQX/"}]},{"title":"Redis编译及镜像制作","slug":"Docker/build_reids_image","date":"2022-01-01T02:19:17.776Z","updated":"2023-08-19T21:43:49.793Z","comments":true,"path":"2022/01/01/08f3956c295a/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/08f3956c295a/","excerpt":"","text":"制作背景 docker hub中默认下载的镜像运行目录比较分散，为方便统一管理，因此自己制作镜像。 此处记录下相关制作步骤。 配置镜像源 华为云镜像源配置 安装Docker 参考资料 编译Redis 命令如下 script1234567891011121314#!/bin/bashyum install -y wget make gcc gcc-c++ libstdc++-devel net-toolsmkdir -p /opt/rediscd /opt/wget -O redis-6.2.3.tar.gz https://download.redis.io/releases/redis-6.2.3.tar.gz?_ga=2.28225850.76180306.1622212345-587279226.1622212345tar xvf redis-6.2.3.tar.gzrm -rf redis-6.2.3.tar.gzcd /opt/redis-6.2.3/sed -i &#x27;s|^PREFIX?=/usr/local|PREFIX?=/opt/redis/|g&#x27; /opt/redis-6.2.3/src/Makefilemake distclean &amp;&amp; make make installcp -r /opt/redis-6.2.3/redis.conf /opt/redis/tar zcvf redis-6.2.3.tar.gz redis# redis-6.2.3.tar.gz即为可直接用于安装的软件包 制作镜像 拉取基础镜像 script1docker pull centos 制作redis镜像 废话不多说，直接上脚本 script12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/bin/bashmkdir -p /opt/redis/datacd /opt/redis# 手动将4.1章节编译的redis软件包拷贝/opt/redis目录下# 添加容器内启动脚本cat &gt; /opt/redis/run.sh &lt;&lt;EOF#!/bin/bashexport PATH=\\$PATH:/opt/redis/binmkdir -p /opt/redis/data/logs#修改redis配置sed -i &quot;s|^bind 127.0.0.1|#bind 127.0.0.1|g&quot; /opt/redis/redis.confsed -i &quot;s|^# requirepass foobared|requirepass monkey123456|g&quot; /opt/redis/redis.confsed -i &quot;s|^logfile \\&quot;\\&quot;|logfile /opt/redis/data/logs/redis.log|g&quot; /opt/redis/redis.confsed -i &quot;s|^dir ./|dir /opt/redis/data/|g&quot; /opt/redis/redis.confnohup /opt/redis/bin/redis-server /opt/redis/redis.conf &gt;/dev/null 2&gt;&amp;1 &amp;while truedo sleep 66666doneEOF# 添加Dockerfilecat &gt; /opt/redis/Dockerfile &lt;&lt;EOFFROM centos:latestMAINTAINER huifeidechengxuhou 905280842@qq.comADD redis-6.2.3.tar.gz /opt/COPY run.sh /opt/RUN chmod +x /opt/run.shWORKDIR /opt/ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;/opt/run.sh&quot;]EOF# 制作镜像docker build -t monkey-redis:1.0.0 .# 运行镜像docker run -it -d --name=monkey-redis -p 10005:6379 -v /opt/redis/data:/opt/redis/data monkey-redis:1.0.0 bash# 进入容器docker exec -it $(docker ps -a | grep monkey-redis | awk &#x27;&#123;print $1&#125;&#x27;) bash# 容器内登录数据库/opt/redis/bin/redis-cli 数据库访问截图","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.blog.candle-lion.com/categories/Docker/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.blog.candle-lion.com/tags/Redis/"}]},{"title":"MySQL镜像制作","slug":"Docker/build_mysql_image","date":"2022-01-01T02:19:17.772Z","updated":"2023-08-19T21:43:40.464Z","comments":true,"path":"2022/01/01/3a721c407339/","link":"","permalink":"https://www.blog.candle-lion.com/2022/01/01/3a721c407339/","excerpt":"","text":"制作背景 docker hub中默认下载的镜像运行目录比较分散，为方便统一管理，因此自己制作镜像。 此处记录下相关制作步骤。 配置镜像源 华为云镜像源配置 安装Docker 参考资料 制作镜像 拉取基础镜像 script1docker pull centos 制作镜像脚本 废话不多说，直接上脚本 script123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#!/bin/bashmkdir -p /opt/mysqlcd /opt/mysql# 通过wget下载软件包wget https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.24-linux-glibc2.12-x86_64.tar.xz# 解压软件包tar xvf mysql-*rm -rf mysql-*.tar.xzmv $(ls | grep mysql | awk &#x27;&#123;print $1&#125;&#x27;) mysql# 添加配置文件cat &gt; /opt/mysql/mysql/my.cnf &lt;&lt; EOF[client]default-character-set=utf8mb4port=3306socket=/opt/mysql/log/mysql_client_3306.sockssl-ca=/opt/mysql/data/ca.pemssl-cert=/opt/mysql/data/server-cert.pemssl-key=/opt/mysql/data/server-key.pem# The MySQL server[mysqld]character-set-server=utf8mb4port=3306socket=/opt/mysql/log/mysql_mysqld_3306.sockskip-external-lockingbasedir=/opt/mysqldatadir=/opt/mysql/datalog-error=/opt/mysql/log/mysql_error.logpid-file=/opt/mysql/log/mysql.pidkey_buffer_size=16Mmax_allowed_packet=1Mtable_open_cache=64explicit_defaults_for_timestamp=onlower-case-table-names=1#ssl settingssl-ca=/opt/mysql/data/ca.pemssl-cert=/opt/mysql/data/server-cert.pemssl-key=/opt/mysql/data/server-key.pem# 允许最大连接数max_connections=20000# 允许连接失败的次数。max_connect_errors=10general-log=1log-output=FILEgeneral-log-file=/opt/mysql/mysql.logEOF# 添加容器内启动脚本cat &gt; /opt/mysql/run.sh &lt;&lt;EOF#!/bin/bashexport PATH=\\$PATH:/opt/mysql/bin:/opt/mysql/support-files# 添加用户和用户组groupadd mysqluseradd -r -g mysql mysqlmkdir -p /opt/mysql/log/# 修改mysql目录权限chown mysql:mysql -R /opt/mysqlyum install -y libaio-devel.x86_64 numactl net-toolssu mysql &lt;&lt;ENDif [ \\$(ls /opt/mysql/data/ | wc -l) == 0 ];then/opt/mysql/bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/ --datadir=/opt/mysql/data --lower-case-table-names=1 &gt; /opt/mysql/log/init.log 2&gt;&amp;1sed -i &#x27;s|^basedir=|basedir=/opt/mysql/|g&#x27; /opt/mysql/support-files/mysql.serversed -i &#x27;s|^datadir=|datadir=/opt/mysql/data/|g&#x27; /opt/mysql/support-files/mysql.serverfiif [ \\$(netstat -anp | grep 3306 | grep LISTEN | wc -l) == 0];then/opt/mysql/support-files/mysql.server startelse/opt/mysql/support-files/mysql.server restartfiENDln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5cat &gt; /opt/mysql/init.sql &lt;&lt;STOPalter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;monkey123456&#x27;;use mysql;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27; and host=&#x27;localhost&#x27;;ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;monkey123456&#x27;;GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; ;flush privileges;STOPpassword=\\$(cat /opt/mysql/log/init.log | grep password | awk -F &#x27;localhost: &#x27; &#x27;&#123;print \\$2&#125;&#x27;)mysql -h127.0.0.1 -uroot -p\\$&#123;password&#125; -e &quot;source /opt/mysql/init.sql;&quot; --connect-expired-passwordrm -rf /opt/mysql/init.sqlwhile truedo sleep 66666doneEOF# 在宿主机创建创建数据目录，用于挂载mkdir -p /opt/mysql/data# 添加Dockerfilecat &gt; /opt/mysql/Dockerfile &lt;&lt;EOFFROM centos:latestMAINTAINER huifeidechengxuhou 905280842@qq.comCOPY mysql /opt/mysqlCOPY run.sh /opt/RUN chmod +x /opt/run.shWORKDIR /opt/ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;/opt/run.sh&quot;]EOF# 制作镜像docker build -t monkey-mysql:1.0.0 .# 运行镜像docker run -it -d --name=monkey-mysql -p 3306:3306 -v /opt/mysql/data:/opt/mysql/data monkey-mysql:1.0.0 bash# 进入容器docker exec -it $(docker ps -a | grep monkey-mysql | awk &#x27;&#123;print $1&#125;&#x27;) bash# 容器内登录数据库mysql -uroot -h127.0.0.1 -pmonkey123456 制作镜像截图 运行镜像截图 访问数据截图","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.blog.candle-lion.com/categories/Docker/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://www.blog.candle-lion.com/tags/MySQL/"}]}],"categories":[{"name":"Android","slug":"Android","permalink":"https://www.blog.candle-lion.com/categories/Android/"},{"name":"JAVA","slug":"JAVA","permalink":"https://www.blog.candle-lion.com/categories/JAVA/"},{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/categories/Linux/"},{"name":"开源软件","slug":"开源软件","permalink":"https://www.blog.candle-lion.com/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/"},{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Windows","slug":"Windows","permalink":"https://www.blog.candle-lion.com/categories/Windows/"},{"name":"Docker","slug":"Docker","permalink":"https://www.blog.candle-lion.com/categories/Docker/"},{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/categories/Python/"}],"tags":[{"name":"逆向分析","slug":"逆向分析","permalink":"https://www.blog.candle-lion.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"},{"name":"证书","slug":"证书","permalink":"https://www.blog.candle-lion.com/tags/%E8%AF%81%E4%B9%A6/"},{"name":"Shell","slug":"Shell","permalink":"https://www.blog.candle-lion.com/tags/Shell/"},{"name":"Linux","slug":"Linux","permalink":"https://www.blog.candle-lion.com/tags/Linux/"},{"name":"OPC UA","slug":"OPC-UA","permalink":"https://www.blog.candle-lion.com/tags/OPC-UA/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.blog.candle-lion.com/tags/SpringBoot/"},{"name":"前端","slug":"前端","permalink":"https://www.blog.candle-lion.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Windows","slug":"Windows","permalink":"https://www.blog.candle-lion.com/tags/Windows/"},{"name":"格式化","slug":"格式化","permalink":"https://www.blog.candle-lion.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"name":"dosgame","slug":"dosgame","permalink":"https://www.blog.candle-lion.com/tags/dosgame/"},{"name":"Python","slug":"Python","permalink":"https://www.blog.candle-lion.com/tags/Python/"},{"name":"EMQX","slug":"EMQX","permalink":"https://www.blog.candle-lion.com/tags/EMQX/"},{"name":"Redis","slug":"Redis","permalink":"https://www.blog.candle-lion.com/tags/Redis/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.blog.candle-lion.com/tags/MySQL/"}]}